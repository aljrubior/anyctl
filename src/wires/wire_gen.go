// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wires

import (
	"github.com/aljrubior/anyctl/clients/accounts"
	"github.com/aljrubior/anyctl/clients/assets"
	"github.com/aljrubior/anyctl/clients/deployments"
	"github.com/aljrubior/anyctl/clients/fabrics"
	"github.com/aljrubior/anyctl/clients/organizationPrivateSpaces"
	"github.com/aljrubior/anyctl/clients/organizationRuntimeFabrics"
	"github.com/aljrubior/anyctl/clients/privateSpaces"
	"github.com/aljrubior/anyctl/clients/schedulers"
	"github.com/aljrubior/anyctl/clients/sharedspaces"
	"github.com/aljrubior/anyctl/clients/targets"
	"github.com/aljrubior/anyctl/conf"
	"github.com/aljrubior/anyctl/managers"
	"github.com/aljrubior/anyctl/services"
)

// Injectors from accountManagerWire.go:

func InitializeAccountManager(config conf.AccountClientConfig) (managers.AccountManager, error) {
	defaultAccountClient := accounts.NewDefaultAccountClient(config)
	defaultAccountService := services.NewDefaultAccountService(defaultAccountClient)
	defaultAccountManager := managers.NewDefaultAccountManager(defaultAccountService)
	return defaultAccountManager, nil
}

// Injectors from anyctlConfigManagerWire.go:

func InitializeAnyctlConfigManager() (managers.AnyctlConfigManager, error) {
	appConfig := conf.NewAppConfig()
	anyctlConfigManager, err := managers.NewAnyctlConfigManager(appConfig)
	if err != nil {
		return managers.AnyctlConfigManager{}, err
	}
	return anyctlConfigManager, nil
}

// Injectors from assetManagerWire.go:

func InitializeAssetManager(config conf.AssetClientConfig) (managers.AssetManager, error) {
	defaultAssetClient := assets.NewDefaultAssetClient(config)
	defaultAssetService := services.NewDefaultAssetService(defaultAssetClient)
	defaultAssetManager := managers.NewDefaultAssetManager(defaultAssetService)
	return defaultAssetManager, nil
}

// Injectors from configManagerWire.go:

func InitializeConfigManager() managers.ConfigManager {
	appConfig := conf.NewAppConfig()
	defaultConfigManager := managers.NewDefaultConfigManager(appConfig)
	return defaultConfigManager
}

// Injectors from deployerManagerWire.go:

func InitializeDeployerManager(deploymentManager managers.DeploymentManager, assetManager managers.AssetManager, fabricManager managers.OrganizationRuntimeFabricManager) (managers.DeployerManager, error) {
	defaultDeployerManager := managers.NewDefaultDeployerManager(deploymentManager, assetManager, fabricManager)
	return defaultDeployerManager, nil
}

// Injectors from deploymentManagerWire.go:

func InitializeDeploymentManager(config conf.DeploymentClientConfig, assetManager managers.AssetManager) (managers.DeploymentManager, error) {
	defaultDeploymentClient := deployments.NewDefaultDeploymentClient(config)
	defaultDeploymentService := services.NewDefaultDeploymentService(defaultDeploymentClient)
	defaultDeploymentManager := managers.NewDefaultDeploymentManager(defaultDeploymentService, assetManager)
	return defaultDeploymentManager, nil
}

// Injectors from fabricManagerWire.go:

func InitializeFabricManager(config conf.FabricClientConfig) (managers.FabricManager, error) {
	defaultFabricClient := fabrics.NewDefaultFabricClient(config)
	defaultFabricService := services.NewDefaultFabricService(defaultFabricClient)
	defaultFabricManager := managers.NewDefaultFabricManager(defaultFabricService)
	return defaultFabricManager, nil
}

// Injectors from organizationPrivateSpaceManagerWire.go:

func InitializeOrganizationPrivateSpaceManager(config conf.RuntimeFabricClientConfig) (managers.OrganizationPrivateSpaceManager, error) {
	defaultOrganizationPrivateSpaceClient := organizationPrivateSpaces.NewOrganizationDefaultPrivateSpaceClient(config)
	defaultOrganizationPrivateSpaceService := services.NewDefaultOrganizationPrivateSpaceService(defaultOrganizationPrivateSpaceClient)
	defaultOrganizationPrivateSpaceManager := managers.NewDefaultOrganizationPrivateSpaceManager(defaultOrganizationPrivateSpaceService)
	return defaultOrganizationPrivateSpaceManager, nil
}

// Injectors from organizationRuntimeFabricManagerWire.go:

func InitializeOrganizationRuntimeFabricManager(config conf.RuntimeFabricClientConfig) (managers.OrganizationRuntimeFabricManager, error) {
	defaultOrganizationRuntimeFabricClient := organizationRuntimeFabrics.NewDefaultOrganizationRuntimeFabricClient(config)
	defaultOrganizationRuntimeFabricService := services.NewDefaultOrganizationRuntimeFabricService(defaultOrganizationRuntimeFabricClient)
	defaultOrganizationRuntimeFabricManager := managers.NewDefaultOrganizationRuntimeFabricManager(defaultOrganizationRuntimeFabricService)
	return defaultOrganizationRuntimeFabricManager, nil
}

// Injectors from privateSpaceManagerWire.go:

func InitializePrivateSpaceManager(config conf.PrivateSpaceClientConfig) (managers.PrivateSpaceManager, error) {
	defaultPrivateSpaceClient := privateSpaces.NewDefaultPrivateSpaceClient(config)
	defaultPrivateSpaceService := services.NewDefaultPrivateSpaceService(defaultPrivateSpaceClient)
	defaultPrivateSpaceManager := managers.NewDefaultPrivateSpaceManager(defaultPrivateSpaceService)
	return defaultPrivateSpaceManager, nil
}

// Injectors from schedulerManagerWire.go:

func InitializeSchedulerManager(config conf.SchedulerClientConfig, manager managers.DeploymentManager) (managers.SchedulerManager, error) {
	defaultSchedulerClient := schedulers.NewDefaultSchedulerClient(config)
	defaultSchedulerService := services.NewDefaultSchedulerService(defaultSchedulerClient)
	defaultSchedulerManager := managers.NewDefaultSchedulerManager(manager, defaultSchedulerService)
	return defaultSchedulerManager, nil
}

// Injectors from sharedSpaceManagerWire.go:

func InitializeSharedSpaceManager(config conf.SharedSpaceClientConfig) (managers.SharedSpaceManager, error) {
	defaultSharedSpaceClient := sharedspaces.NewDefaultSharedSpaceClient(config)
	defaultSharedSpaceService := services.NewDefaultSharedSpaceService(defaultSharedSpaceClient)
	defaultSharedSpaceManager := managers.NewDefaultSharedSpaceManager(defaultSharedSpaceService)
	return defaultSharedSpaceManager, nil
}

// Injectors from targetManagerWire.go:

func InitializeTargetManager(config conf.TargetClientConfig) (managers.TargetManager, error) {
	defaultTargetClient := targets.NewDefaultTargetClient(config)
	defaultTargetService := services.NewDefaultTargetService(defaultTargetClient)
	defaultTargetManager := managers.NewDefaultTargetManager(defaultTargetService)
	return defaultTargetManager, nil
}
